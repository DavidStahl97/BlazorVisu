@using BlazorVisu.Models
@using Radzen
@using Radzen.Blazor

<div class="production-container">
    <svg viewBox="0 0 1000 600" class="production-svg">
        <!-- Background -->
        <rect width="1000" height="600" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2" rx="10"/>

        <!-- Machine -->
        <g class="station machine" transform="translate(50, 200)">
            <!-- Shadow -->
            <rect width="120" height="80" rx="4" x="2" y="2"
                  fill="rgba(0,0,0,0.1)"/>
            <!-- Main button -->
            <rect width="120" height="80" rx="4"
                  fill="@GetStatusColor(ProductionData.Machine.Status)"
                  stroke="@GetBorderColor(ProductionData.Machine.Status)" stroke-width="1"/>
            <text x="60" y="28" text-anchor="middle" class="station-text">Machine</text>
            <text x="60" y="45" text-anchor="middle" class="station-subtext">@ProductionData.Machine.Name</text>
            <text x="60" y="60" text-anchor="middle" class="status-text">@ProductionData.Machine.Status</text>

            <!-- Production indicator -->
            @if (ProductionData.Machine.Status == StationStatus.Running)
            {
                <circle cx="105" cy="12" r="4" fill="white">
                    <animate attributeName="opacity" values="1;0.3;1" dur="1s" repeatCount="indefinite"/>
                </circle>
            }
        </g>

        <!-- Switch/Weiche -->
        <g class="station switch" transform="translate(400, 200)">
            <!-- Shadow -->
            <rect width="80" height="80" rx="4" x="2" y="2"
                  fill="rgba(0,0,0,0.1)"/>
            <!-- Main button -->
            <rect width="80" height="80" rx="4"
                  fill="@GetStatusColor(ProductionData.Switch.Status)"
                  stroke="@GetBorderColor(ProductionData.Switch.Status)" stroke-width="1"/>
            <text x="40" y="32" text-anchor="middle" class="station-text">Switch</text>
            <text x="40" y="50" text-anchor="middle" class="status-text">@ProductionData.Switch.Status</text>

            @if (ProductionData.Switch.Status == StationStatus.Running)
            {
                <circle cx="65" cy="15" r="3" fill="white">
                    <animate attributeName="opacity" values="1;0.3;1" dur="0.8s" repeatCount="indefinite"/>
                </circle>
            }
        </g>

        <!-- Consumers -->
        @for (int i = 0; i < ProductionData.Consumers.Count; i++)
        {
            var consumer = ProductionData.Consumers[i];
            var yPosition = 100 + (i * 150);

            <g class="station consumer" transform="translate(750, @yPosition)">
                <!-- Shadow -->
                <rect width="120" height="80" rx="4" x="2" y="2"
                      fill="rgba(0,0,0,0.1)"/>
                <!-- Main button -->
                <rect width="120" height="80" rx="4"
                      fill="@GetStatusColor(consumer.Status)"
                      stroke="@GetBorderColor(consumer.Status)" stroke-width="1"/>
                <text x="60" y="22" text-anchor="middle" class="station-text">Consumer @(i+1)</text>
                <text x="60" y="35" text-anchor="middle" class="station-subtext">@consumer.Name</text>
                <text x="60" y="50" text-anchor="middle" class="status-text">@consumer.Status</text>
                <text x="60" y="65" text-anchor="middle" class="buffer-text">Buffer: @consumer.CurrentBuffer/@consumer.BufferCapacity</text>

                <!-- Buffer indicator -->
                <rect x="10" y="8" width="@(consumer.BufferPercentage)" height="4" fill="rgba(255,255,255,0.8)" rx="2"/>
                <rect x="10" y="8" width="100" height="4" fill="none" stroke="rgba(255,255,255,0.4)" stroke-width="1" rx="2"/>

                @if (consumer.Status == StationStatus.Running)
                {
                    <circle cx="105" cy="12" r="4" fill="white">
                        <animate attributeName="opacity" values="1;0.3;1" dur="1.2s" repeatCount="indefinite"/>
                    </circle>
                }
            </g>
        }

        <!-- Connection Lines -->
        <!-- Machine to Switch -->
        <line x1="170" y1="240" x2="400" y2="240"
              stroke="#666" stroke-width="3" stroke-dasharray="5,5">
            <animate attributeName="stroke-dashoffset" values="10;0" dur="1s" repeatCount="indefinite"/>
        </line>

        <!-- Switch to Consumers -->
        @for (int i = 0; i < ProductionData.Consumers.Count; i++)
        {
            var yPosition = 140 + (i * 150);
            <line x1="480" y1="240" x2="750" y2="@yPosition"
                  stroke="#666" stroke-width="2" stroke-dasharray="3,3">
                <animate attributeName="stroke-dashoffset" values="6;0" dur="0.8s" repeatCount="indefinite"/>
            </line>
        }

        <!-- Animated Components in Transit -->
        @foreach (var component in ComponentsInTransit)
        {
            <circle r="8" fill="@GetComponentColor(component.Type)" stroke="#333" stroke-width="2">
                <animateMotion dur="3s" repeatCount="indefinite"
                               path="@GetComponentPath(component)"/>
            </circle>
        }

        <!-- Title -->
        <text x="500" y="30" text-anchor="middle" class="title-text">Production System Visualization</text>
        <text x="500" y="50" text-anchor="middle" class="subtitle-text">
            System Status: @(ProductionData.IsSystemHealthy ? "Healthy" : "Alert") |
            Total Produced: @ProductionData.Machine.TotalProduced |
            Components in Transit: @ProductionData.ComponentsInTransit.Count
        </text>
    </svg>
</div>

<style>
    .production-container {
        width: 100%;
        height: 600px;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
        background: white;
    }

    .production-svg {
        width: 100%;
        height: 100%;
    }

    .station-text {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 13px;
        font-weight: 500;
        fill: white;
        text-shadow: 1px 1px 1px rgba(0,0,0,0.2);
    }

    .station-subtext {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 10px;
        fill: rgba(255,255,255,0.9);
    }

    .status-text {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 9px;
        fill: rgba(255,255,255,0.8);
        font-weight: 400;
    }

    .buffer-text {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 8px;
        fill: rgba(255,255,255,0.7);
    }

    .title-text {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 18px;
        font-weight: bold;
        fill: #333;
    }

    .subtitle-text {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 12px;
        fill: #666;
    }

    .station {
        /* No hover effects or cursor pointer - static display */
    }
</style>

@code {
    [Parameter] public ProductionSystem ProductionData { get; set; } = new();

    private List<Component> ComponentsInTransit => ProductionData.ComponentsInTransit;

    private string GetStatusColor(StationStatus status) => status switch
    {
        StationStatus.Running => "#4caf50",     // Material Green
        StationStatus.Stopped => "#ff9800",     // Material Orange
        StationStatus.Error => "#f44336",       // Material Red
        StationStatus.Maintenance => "#2196f3", // Material Blue
        _ => "#9e9e9e"                          // Material Gray
    };

    private string GetBorderColor(StationStatus status) => status switch
    {
        StationStatus.Running => "#388e3c",     // Darker Green
        StationStatus.Stopped => "#f57c00",     // Darker Orange
        StationStatus.Error => "#d32f2f",       // Darker Red
        StationStatus.Maintenance => "#1976d2", // Darker Blue
        _ => "#757575"                          // Darker Gray
    };

    private string GetComponentColor(ComponentType type) => type switch
    {
        ComponentType.TypeA => "#007bff",  // Blue
        ComponentType.TypeB => "#28a745",  // Green
        ComponentType.TypeC => "#dc3545",  // Red
        _ => "#6c757d"                     // Gray
    };

    private string GetComponentPath(Component component)
    {
        // Determine path based on component's journey
        if (component.CurrentStationId == "MACHINE_01")
        {
            return "M 170 240 L 400 240";  // Machine to Switch
        }
        else if (component.CurrentStationId?.StartsWith("CONSUMER") == true)
        {
            var consumerIndex = int.Parse(component.CurrentStationId.Replace("CONSUMER_", "")) - 1;
            var yPosition = 140 + (consumerIndex * 150);
            return $"M 480 240 L 750 {yPosition}";  // Switch to Consumer
        }

        return "M 170 240 L 400 240";  // Default path
    }
}