@using BlazorVisu.Models
@using BlazorVisu.Services
@using Radzen
@using Radzen.Blazor
@inject IProductionService ProductionService
@implements IDisposable

<svg viewBox="0 0 1000 800" class="production-svg">

        <!-- Machine -->
        <g class="station machine" transform="translate(@ProductionData.Machine.Position.X, @ProductionData.Machine.Position.Y)">
            <!-- Shadow -->
            <rect width="120" height="80" rx="4" x="2" y="2"
                  fill="rgba(0,0,0,0.1)"/>
            <!-- Main button -->
            <rect width="120" height="80" rx="4"
                  fill="@GetStatusColor(ProductionData.Machine.Status)"
                  stroke="@GetBorderColor(ProductionData.Machine.Status)" stroke-width="1"/>
            <text x="60" y="45" text-anchor="middle" class="station-text">@ProductionData.Machine.Name</text>

            <!-- Production indicator -->
            @if (ProductionData.Machine.Status == StationStatus.Running)
            {
                <circle cx="105" cy="12" r="4" fill="white">
                    <animate attributeName="opacity" values="1;0.3;1" dur="1s" repeatCount="indefinite"/>
                </circle>
            }
        </g>

        <!-- Switches -->
        @foreach (var switchStation in ProductionData.Switches)
        {
            <g class="station switch" transform="translate(@switchStation.Position.X, @switchStation.Position.Y)">
                <!-- Shadow -->
                <rect width="80" height="80" rx="4" x="2" y="2"
                      fill="rgba(0,0,0,0.1)"/>
                <!-- Main button -->
                <rect width="80" height="80" rx="4"
                      fill="@GetStatusColor(switchStation.Status)"
                      stroke="@GetBorderColor(switchStation.Status)" stroke-width="1"/>
                <text x="40" y="45" text-anchor="middle" class="station-text">@switchStation.Name</text>

                @if (switchStation.Status == StationStatus.Running)
                {
                    <circle cx="65" cy="15" r="3" fill="white">
                        <animate attributeName="opacity" values="1;0.3;1" dur="0.8s" repeatCount="indefinite"/>
                    </circle>
                }
            </g>
        }

        <!-- Consumers -->
        @foreach (var consumer in ProductionData.Consumers)
        {
            <g class="station consumer" transform="translate(@consumer.Position.X, @consumer.Position.Y)">
                <!-- Shadow -->
                <rect width="120" height="80" rx="4" x="2" y="2"
                      fill="rgba(0,0,0,0.1)"/>
                <!-- Main button -->
                <rect width="120" height="80" rx="4"
                      fill="@GetStatusColor(consumer.Status)"
                      stroke="@GetBorderColor(consumer.Status)" stroke-width="1"/>
                <text x="60" y="45" text-anchor="middle" class="station-text">@consumer.Name</text>

                @if (consumer.Status == StationStatus.Running)
                {
                    <circle cx="105" cy="12" r="4" fill="white">
                        <animate attributeName="opacity" values="1;0.3;1" dur="1.2s" repeatCount="indefinite"/>
                    </circle>
                }
            </g>
        }

        <!-- Connection Lines -->
        <!-- Machine to Switches -->
        @foreach (var switchStation in ProductionData.Switches)
        {
            var machineX = ProductionData.Machine.Position.X + 120;
            var machineY = ProductionData.Machine.Position.Y + 40;
            var switchX = switchStation.Position.X;
            var switchY = switchStation.Position.Y + 40;
            var isActiveRoute = IsActiveTransportRoute(null, switchStation.Id);

            <line x1="@machineX" y1="@machineY" x2="@switchX" y2="@switchY"
                  stroke="@(isActiveRoute ? "#4caf50" : "#666")"
                  stroke-width="@(isActiveRoute ? 4 : 3)"
                  stroke-dasharray="@(isActiveRoute ? "5,5" : "none")">
                @if (isActiveRoute)
                {
                    <animate attributeName="stroke-dashoffset" values="10;0" dur="1s" repeatCount="indefinite"/>
                }
            </line>
        }

        <!-- Switch to Consumers -->
        @foreach (var consumer in ProductionData.Consumers)
        {
            var switchStation = ProductionData.Switches.FirstOrDefault(s => s.Id == consumer.SwitchId);
            if (switchStation != null)
            {
                var switchX = switchStation.Position.X + 80;
                var switchY = switchStation.Position.Y + 40;
                var consumerX = consumer.Position.X;
                var consumerY = consumer.Position.Y + 40;
                var isActiveRoute = IsActiveTransportRoute(consumer.SwitchId, consumer.Id);

                <line x1="@switchX" y1="@switchY" x2="@consumerX" y2="@consumerY"
                      stroke="@(isActiveRoute ? "#4caf50" : "#666")"
                      stroke-width="@(isActiveRoute ? 3 : 2)"
                      stroke-dasharray="@(isActiveRoute ? "3,3" : "none")">
                    @if (isActiveRoute)
                    {
                        <animate attributeName="stroke-dashoffset" values="6;0" dur="0.8s" repeatCount="indefinite"/>
                    }
                </line>
            }
        }

        <!-- Animated Components in Transit -->
        @foreach (var component in ComponentsInTransit)
        {
            <circle r="8" fill="@GetComponentColor(component.Type)" stroke="#333" stroke-width="2">
                <animateMotion dur="3s" repeatCount="indefinite"
                               path="@GetComponentPath(component)"/>
            </circle>
        }

</svg>

<style>
    body, html {
        overflow: hidden !important;
        margin: 0 !important;
        padding: 0 !important;
        width: 100vw !important;
        height: 100vh !important;
    }

    * {
        box-sizing: border-box;
    }

    .rz-layout, .rz-body, .rz-content-container, .main {
        overflow: hidden !important;
        margin: 0 !important;
        padding: 0 !important;
        width: 100vw !important;
        height: 100vh !important;
    }

    .production-svg {
        width: 100vw;
        height: 100vh;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
    }

    .station-text {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-size: 14px;
        font-weight: 500;
        fill: white;
        text-shadow: 1px 1px 1px rgba(0,0,0,0.3);
    }


    .station {
        /* No hover effects or cursor pointer - static display */
    }
</style>

@code {
    [Parameter] public ProductionSystem ProductionData { get; set; } = new();

    private List<Component> ComponentsInTransit => ProductionData.ComponentsInTransit;
    private TransportRoute _currentTransportRoute = new();

    protected override void OnInitialized()
    {
        ProductionService.TransportRouteChanged += OnTransportRouteChanged;
        _currentTransportRoute = ProductionData.CurrentTransportRoute;
    }

    private void OnTransportRouteChanged(object? sender, TransportRoute route)
    {
        _currentTransportRoute = route;
        InvokeAsync(StateHasChanged);
    }

    private bool IsActiveTransportRoute(string? switchId, string targetId)
    {
        if (!_currentTransportRoute.IsActive)
            return false;

        // For machine to switch connections
        if (switchId == null)
            return targetId == _currentTransportRoute.TargetSwitchId;

        // For switch to consumer connections
        return switchId == _currentTransportRoute.TargetSwitchId &&
               targetId == _currentTransportRoute.TargetConsumerId;
    }

    public void Dispose()
    {
        ProductionService.TransportRouteChanged -= OnTransportRouteChanged;
    }

    private string GetStatusColor(StationStatus status) => status switch
    {
        StationStatus.Running => "#4caf50",     // Material Green
        StationStatus.Stopped => "#ff9800",     // Material Orange
        StationStatus.Error => "#f44336",       // Material Red
        StationStatus.Maintenance => "#2196f3", // Material Blue
        _ => "#9e9e9e"                          // Material Gray
    };

    private string GetBorderColor(StationStatus status) => status switch
    {
        StationStatus.Running => "#388e3c",     // Darker Green
        StationStatus.Stopped => "#f57c00",     // Darker Orange
        StationStatus.Error => "#d32f2f",       // Darker Red
        StationStatus.Maintenance => "#1976d2", // Darker Blue
        _ => "#757575"                          // Darker Gray
    };

    private string GetComponentColor(ComponentType type) => type switch
    {
        ComponentType.TypeA => "#007bff",  // Blue
        ComponentType.TypeB => "#28a745",  // Green
        ComponentType.TypeC => "#dc3545",  // Red
        _ => "#6c757d"                     // Gray
    };

    private string GetComponentPath(Component component)
    {
        if (component.CurrentStationId == ProductionData.Machine.Id)
        {
            // Component is at machine - path to first switch as example
            var firstSwitch = ProductionData.Switches.FirstOrDefault();
            if (firstSwitch != null)
            {
                var machineX = ProductionData.Machine.Position.X + 120;
                var machineY = ProductionData.Machine.Position.Y + 40;
                var switchX = firstSwitch.Position.X;
                var switchY = firstSwitch.Position.Y + 40;
                return $"M {machineX} {machineY} L {switchX} {switchY}";
            }
        }
        else if (component.CurrentStationId?.StartsWith("SWITCH") == true)
        {
            // Component is at switch - path to random consumer of that switch
            var switchStation = ProductionData.Switches.FirstOrDefault(s => s.Id == component.CurrentStationId);
            if (switchStation != null)
            {
                var consumers = ProductionData.Consumers.Where(c => c.SwitchId == switchStation.Id).ToList();
                if (consumers.Any())
                {
                    var targetConsumer = consumers.First(); // Could be random
                    var switchX = switchStation.Position.X + 80;
                    var switchY = switchStation.Position.Y + 40;
                    var consumerX = targetConsumer.Position.X;
                    var consumerY = targetConsumer.Position.Y + 40;
                    return $"M {switchX} {switchY} L {consumerX} {consumerY}";
                }
            }
        }
        else if (component.CurrentStationId?.StartsWith("CONSUMER") == true)
        {
            // Component is at consumer - find its position
            var consumer = ProductionData.Consumers.FirstOrDefault(c => c.Id == component.CurrentStationId);
            if (consumer != null)
            {
                var switchStation = ProductionData.Switches.FirstOrDefault(s => s.Id == consumer.SwitchId);
                if (switchStation != null)
                {
                    var switchX = switchStation.Position.X + 80;
                    var switchY = switchStation.Position.Y + 40;
                    var consumerX = consumer.Position.X;
                    var consumerY = consumer.Position.Y + 40;
                    return $"M {switchX} {switchY} L {consumerX} {consumerY}";
                }
            }
        }

        // Default fallback path
        var defaultSwitch = ProductionData.Switches.FirstOrDefault();
        if (defaultSwitch != null)
        {
            var machineX = ProductionData.Machine.Position.X + 120;
            var machineY = ProductionData.Machine.Position.Y + 40;
            var switchX = defaultSwitch.Position.X;
            var switchY = defaultSwitch.Position.Y + 40;
            return $"M {machineX} {machineY} L {switchX} {switchY}";
        }

        return "M 170 240 L 400 240";
    }
}