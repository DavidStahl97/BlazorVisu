@page "/weather"
@using Radzen
@using Radzen.Blazor

<PageTitle>Weather</PageTitle>

<RadzenStack Gap="2rem" Class="rz-p-4">
    <RadzenCard>
        <RadzenStack>
            <RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1">Weather Forecast</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1">
                This component demonstrates fetching data from a service.
            </RadzenText>
        </RadzenStack>
    </RadzenCard>

    @if (forecasts == null)
    {
        <RadzenCard>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Size="ProgressBarCircularSize.Medium" />
                <RadzenText>Loading weather data...</RadzenText>
            </RadzenStack>
        </RadzenCard>
    }
    else
    {
        <RadzenCard>
            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" 
                            FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" 
                            PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                            Data="@forecasts" TItem="WeatherForecast" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
                <Columns>
                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Date" Filterable="false" Title="Date" 
                                          FormatString="{0:d}" />
                    <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureC" Title="Temp. (C)" 
                                          FormatString="{0:d}" />
                    <RadzenDataGridColumn TItem="WeatherForecast" Property="TemperatureF" Title="Temp. (F)" 
                                          FormatString="{0:d}" />
                    <RadzenDataGridColumn TItem="WeatherForecast" Property="Summary" Title="Summary" />
                </Columns>
            </RadzenDataGrid>
        </RadzenCard>
    }
</RadzenStack>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500); // Simulate loading
        
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = Summaries[Random.Shared.Next(Summaries.Length)]
        }).ToArray();
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };
}